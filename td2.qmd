---
title: "td2"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option

```{r}
# Importez les fichiers characters.csv, episodes.csv, scenes.csv et appearances.csv du répertoire data et les stocker dans des variables de mêmes nom.
library(readr)
characters = read_csv("data/characters.csv")
episodes = read_csv("data/episodes.csv")
scenes = read_csv("data/scenes.csv")
appearances = read_csv("data/appearances.csv")


```

disables the printing of code (only out

```{r}
View(characters)
View(scenes)
```

```{r}
#Regardez la taille de la data.frame appearences, observez les variables communes aux tables scenes et appearences. Utilisez les fonctions str et summary sur les différentes tables pour bien comprendre leurs structures et leurs relations. Faites un schéma des relations entre les différentes tables.

nrow_appearences = nrow(appearances)
ncol_appearences = ncol(appearances)

colNamesApp = names(appearances)
colNamesScenes = names(scenes)
variables_communes = colNamesApp[colNamesApp %in% colNamesScenes]





```

```{r}
#str(characters)
summary(characters)

```

```{r}
#nombre de morts dans les 10 premiere episodes

sum(scenes$nbdeath[scenes$episodeId<=10])

```

```{r}
#trouver les 5 grandes meurtriers
#View(characters)
sort(table(characters$killedBy),decreasing = TRUE)[1:5]


```

```{r}
#Trouvez la durée de la scène la plus longue et l’id de l’episode.
#which retourne l'id de {max}
scenes[which.max(scenes$duration),] 

```

```{r}

```

```{r}

```

**Exercice 3**

```{r}
library(dplyr)
scenes %>% arrange(desc(duration)) %>% head(1)
```

```{r}
#Trouvez les personnages de la scène la plus longue.
scenes %>% arrange(desc(duration)) %>% head(1) %>% left_join(appearances)

```

```{r}
#Trouvez le lieu le plus visité en nombre de scènes.
scenes %>% group_by(location) %>% summarise(nbsc = n()) %>% arrange(desc(nbsc))


```

```         
```

```{r}
#Trouvez le nombre de scènes se passant à King’s Landing

scenes %>% filter(subLocation=="King's Landing") %>% summarise(nbsc = n())


```

```{r}
#Trouvez le lieux précis ou le plus de personages meurent ?

scenes %>% group_by(subLocation) %>% summarise(nbd=sum(nbdeath)) %>% arrange(desc(nbd))


```

```{r}
#Trouvez l’épisode ou Jon Snow est le plus longtemps visible.

appearances %>%filter(name=="Jon Snow") %>% 
  left_join(scenes) %>% left_join(episodes) %>% 
  group_by(name,episodeId,episodeTitle) %>% 
  summarise(screenTime=sum(duration)) %>% 
  arrange(desc(screenTime)) %>% head(1)
```

```{r}
# Combien de personnages passent plus de 30 minutes à l’écran sur l’ensemble des saisons ?

appearances %>% left_join(scenes)  %>% 
  group_by(name) %>% 
  summarise(screenTime=sum(duration)) %>% 
  filter(screenTime>30*60) %>% 
  nrow()
```

```{r}
# en version racourci avec count 
appearances %>% left_join(scenes)  %>% 
  count(name,wt=duration,name = "duration") %>% 
  filter(duration >30*60) %>% 
  nrow()
```

```{r}
#Quels sont les deux personnages qui passent le plus de scènes ensembles ?

appearances %>% left_join(appearances,by=c("sceneId"="sceneId")) %>% 
  filter(name.x!=name.y) %>% 
  group_by(name.x,name.y) %>% 
  summarise(nbs=n()) %>% 
  arrange(desc(nbs))

```

```{r}
#Quels sont les deux personnages qui passent le plus de temps ensembles ?

appearances %>% left_join(appearances,by=c("sceneId"="sceneId")) %>% 
  filter(name.x!=name.y) %>% 
  left_join(scenes %>% select(sceneId,duration)) %>%
  group_by(name.x,name.y) %>% 
  summarise(commonTime=sum(duration)) %>% 
  arrange(desc(commonTime))
```

```{r}
#Construisez une data.frame avec une ligne par personnages contenant une colone name et une colone pour chaque lieux avec les durées de présences de chaque personnages. Si un personnage n’est jamais allé dans un lieux la valeur est égale à 0.

library(tidyr)
duration_location_character = scenes %>% left_join(appearances) %>% 
  group_by(name,location) %>% 
  summarize(duration=sum(duration))

duration_large = duration_location_character %>% 
  pivot_wider(values_from = duration,names_from = location,values_fill = c("duration"=0))
```

```{r}
#
View(duration_location_character)
View(duration_large)
```

```{r}
#Construisez à partir de la data.frame précédente une matrice contenant uniquement les variables numériques. Filtrez la pour ne conservez que les lignes dont la somme est supérieur à 3600. Normalisez là pour que les sommes en lignes soient égales à 1. Donnez le nom de chaqu personnage conservé à la ligne correspondante dans la matrice avec la fonction rownames.
X=as.matrix(duration_large[,-1])
Xs=X[rowSums(X)>60*60,]
Xns=Xs/rowSums(Xs)
rownames(Xns)=duration_large$name[rowSums(X)>60*60]

```

```{r}
#Utilisez la fonction dist pour calculer la distance de manhatan netre chaque ligne de la matrice précedente. Réalisez ensuite un clustering hierarchique sur cette matrice et tracer le dendogramme. Vous devriez obtenir une figure similaire a la suivante:
hc=hclust(dist(Xns,method="manhattan"))
plot(hc,main = "Clustering des personnages principaux suivant leur lieux de présences",sub ="@comeetie, 2020",xlab = "")
```

### Exercice 4 ggplot

```{r}
jstime = appearances %>% filter(name=="Jon Snow") %>% left_join(scenes) %>% group_by(episodeId) %>% summarise(time=sum(duration)) 
#le groupby episodeId c pour sommer les durations de meme epId
View(jstime)

```

```{r}
#Créer une table jstime contenant pour chaque épisode le temps de présence à l’écran de Jon Snow puis reproduire ce graphique :

library(ggplot2)
jstime = appearances %>% filter(name=="Jon Snow") %>% 
  left_join(scenes) %>% 
  group_by(episodeId) %>% 
  summarise(time=sum(duration))
ggplot(jstime) + 
  geom_line(aes(x=episodeId,y=time))+
  theme_bw()+
  xlab("épisode")+ylab("temps")+
  ggtitle("Temps de présence par épisode de John Snow")
```

```{r}
#Utilisez d’autres géométries : aire, bares. Comparez et commentez.
#Uilisez geom_bar mais spécifiez qu’aucune aggrégation ne doit être faites avec l’option stat='identity' et geom_area.

ggplot(jstime) + 
  geom_bar(aes(x=episodeId,y=time),stat = 'identity')+
  theme_bw()+
  xlab("épisode")+ylab("temps")+
  ggtitle("Temps de présence par épisode de John Snow")


```

```{r}
#Calculez pour l’ensemble des scenes le nombre de mort cumulé et le temps passé depuis la première scène. Réalisez ensuite le graphique suivant:

# nombre de morts cumulé et temps passé
deaths = scenes %>% select(nbdeath,duration,location,episodeId)
#
# 
d1 = deaths
View(d1)

deaths = deaths %>%  mutate(t=cumsum(duration),tdeath=cumsum(nbdeath))
View(deaths)

#mutate ajoute des colonnes à droite, le param t=cumsum(duration) somme les durations de fac cumulative 



```

```{r}
# instant de changement de saison
# ? lag
season_t = episodes %>% mutate(ld=lag(total_duration)) 

#we can use lag with group_by;
#pays   annee value lag 
#france 2022  32    NA
#france 2022  31    32
#france 2022  34    31
#greece 2022  32    NA
#greece 2022  34    32

season_t = season_t %>% 
  mutate(ld=if_else(is.na(ld),0,ld), td = cumsum(ld)) %>% 
  filter(episodeNum==1) %>% pull(td)

#si ld=Na on le remplace par 0, filter gets the lines where epNum == 1, pull(td) gets an array of td values

View(season_t)
```

```{r}
#
# geom_line + labels personalisés
#tracer l'evolution de nombre de morts au cours du temps
#y : nbmorts        x=
ggplot(deaths) + geom_line(aes(x=t/3600,y=tdeath)) +
  scale_x_continuous("",expand = c(0,0),breaks = season_t/3600,
                     labels =   paste("Saison",1:8),)+
  scale_y_continuous("Nombre de morts cumulés", expand=c(0,0))+
  theme_bw()+
    theme(axis.text.x=element_text(angle=90))+
  ggtitle("Evolution du nombre de mort au cours du temps")
```

```{r}
#Construisez une data.frame contenant pour chaque épisode son titre, la saison, la durée de la scène la plus longue, le nombre de scènes et le nombre de morts. Réaliser ensuite un scater plot des variables nombres de scènes et durée de la scène la plus longue.

myDf = episodes %>% left_join(scenes) %>% group_by(episodeId) %>% summarise(nb_scenses=n(),maxDuration=max(duration),sceneCount=max(sceneId),nbDeath=sumcum(nbdeath))

View(myDf)


```
